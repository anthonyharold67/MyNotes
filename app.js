//                       ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥              Javascript Core      ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥

//       ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥               SESSION  2        ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥
// ğŸ”¥ console yazdÄ±rma
/* Python da print(), javascript te;
document.write()
window.alert()
console.log() */
console.log("Hello World!");
console.log("I'm from file");
var x = 5;
console.log(x);

var a= "Global";
console.log(a);
{
    let a = "scope"
    console.log(a);
    {
        let a = "inner scope"
        console.log(a);
    }
    console.log(a);
}

console.log(a);

var c=3;
console.log(c);
var c = 5;
console.log(c);

/* let d = 3;
console.log(d);
let d = 5;
console.log(d); */
//yukarÄ±daki kullanÄ±mda hata veriyor.doÄŸrusu;
let d = 3;
console.log(d);
d = 5;
console.log(d);

const h1 = "constant variable";
console.log(h1);
//h = 2; dersek hata veriyor Ã§Ã¼nkÃ¼ const deÄŸiÅŸmez 
console.log(f);//sadece bu satrÄ±rÄ± yazarsak not defined tanÄ±mÄ± hatasÄ± verir
var f; //diyerek Ã¼stteki hatayÄ± ortadan kaldÄ±rÄ±yoruz bu sefer undefined Ã§Ä±ktÄ±sÄ± vercek
// hoisting olayÄ± gerÃ§ekleÅŸmiÅŸ oluyor
/* console.log(e);
let e = 5; *///let ile yada const ile tanÄ±mlayÄ±nca var daki gibi olmaz hata vermeye devam eder.

//ğŸ”¥ğŸ”¥ Data Types

var g;
console.log(typeof g);// undefined 

var aa = 5;
console.log(typeof aa);
console.log(typeof 5.5);
console.log(typeof 0);
console.log(typeof 1/0);//NaN -> not a number
console.log(typeof NaN);//number
console.log(typeof (1/0)); //number iÅŸlmlerde prantez iÃ§ine almak lazÄ±m
console.log(typeof typeof 5.5);//string Ã§Ã¼nkÃ¼ typeof 5.5 in Ã§Ä±ktÄ±sÄ± number olduÄŸu iÃ§in
console.log(1/0);
console.log(typeof Infinity);//number 

//ğŸ”¥ğŸ”¥ğŸ”¥     string
var merhaba = "Merhaba";
var selam = "Sanada selam";
var instructor = 'Mark'
var myStr= `Merhaba ${instructor}`//backtickle yazÄ±lmasÄ± gerekir bu gibi kullanÄ±mda.aslÄ±nda pythondaki format metodunun kullanÄ±m mantÄ±ÄŸÄ± ile aynÄ± sadece syntaxleri farklÄ±
console.log(myStr);
console.log(`${2+3}`);
console.log(Boolean(""));//false
console.log(Boolean(" "));// true
console.log(Boolean("0"));//true
console.log(Boolean(0));//false
var s;
console.log(Boolean(s));//false undefined olduÄŸu iÃ§in
console.log(typeof s);//undefined
console.log(typeof null);//object
console.log(Boolean(null));//false undefined
console.log(Boolean(null) == false);//true
console.log(null == false);//false
console.log(null == undefined);//true
// ===
console.log(null === undefined);//false
console.log(2 == "2");//true burada js yorum yaparak number yazdÄ±ÄŸÄ±mÄ±zÄ± dÃ¼ÅŸÃ¼nÃ¼p evet eÅŸit olabilir diyor
console.log(2 === "2");//false Ã§Ã¼nkÃ¼ tamamen eÅŸit mi diye soruyor 
console.log(2 + "2");//22
console.log(2 + 2);//4
console.log(2 + 2.0);//4
//            ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥      SESSION 3       ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥

//ğŸ”¥js de number iÅŸlemlerinde maksimum Ã§Ä±ktÄ± alÄ±nabilecek deÄŸer ve minimum deÄŸer vardÄ±r.bunlarÄ±da aÅŸaÄŸÄ±daki ÅŸekilde sorgulayabiliriz:
console.log(Number.MAX_SAFE_INTEGER);//maksimum Ã§alÄ±ÅŸcak dÄŸer
console.log(Number.MIN_SAFE_INTEGER);
//ğŸ”¥ JS de noktalÄ± sayÄ±lar ile iÅŸlemler
var x = 0.1 + 0.2;
console.log(x);//0.30000000000000004
console.log(x.toFixed(5));//0.30000 noktadan sonra 5 deÄŸer getir
console.log(typeof x.toFixed(5));//string Ã§Ä±ktÄ± veriyor
console.log(+x.toFixed(5));// baÅŸÄ±ndaki + numbera Ã§eviriyor.ve noktadan sonraki sÄ±fÄ±rlarÄ± Ã§Ä±ktÄ± vermez.0.3 tÃ¼r
console.log(15+25);//40
console.log(015+025);//8li sayÄ± sisitemine gÃ¶re iÅŸlem yapar Ã§Ä±ktÄ± 34 olur.octal
// 015 : 13 e 025 : 21 e eÅŸit
console.log(08 + 08);//16 Ã§Ã¼nkÃ¼ 8 ve 8den bÃ¼yÃ¼k sayÄ±lar olursa decimal olarak gÃ¶rÃ¼r
var a=2;
var b = a;
console.log(a,b);//primitive tipte olduÄŸu iÃ§in a deÄŸiÅŸince b deÄŸiÅŸmez.primitiv tipte veriler kopyalanÄ±r
var a = 3;
console.log(a,b);// b deÄŸiÅŸmedi.nesne tipinde veriler link ile irtibatlanÄ±r
console.log("araba"+3);//pythontadki gibi deÄŸil stringe yapÄ±ÅŸtÄ±ryor:araba3
console.log(null+3);//3
var a = 3;
var b = a--
console.log(b);//3 iÅŸlme Ã¶nceliÄŸinden
console.log(null==null);//true
console.log(NaN==NaN);// false

//ğŸ”¥ğŸ”¥ğŸ”¥       Operators
var x = 2;
var y= 5;
var z = 7;
var t = "11";
var c = 55;
console.log(x+y+z);
console.log(t - x);//pythondaki gibi hata vermiyor string olan t number gibi davranÄ±r
console.log(t*y);// number gibi davranÄ±r
console.log(t/x);
console.log(c/y);
console.log(c%7);//kalanÄ± verir
console.log(5/0);// Infinity Ã§Ä±ktÄ± verir
console.log(typeof Infinity);// number
console.log(5**2);//25
console.log(100+50*3);// 250,iÅŸlem Ã¶nceliÄŸi iÃ§in:
//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
var b = 5;
console.log(b);
console.log(++b);//6
console.log(--b);//5
var h = 8;
console.log(h--);//Ã§Ä±ktÄ± 8 
console.log(h);//7Ã¶ncelikten kaynaklÄ±
console.log(--h);//6

/* var input= +prompt("enter age")//+ ile number tipine Ã§evirdik
console.log(input);
console.log(input, typeof input); */
var g = 8;
console.log(-g);// -8
var a = 4;
var b = "4";
var c = a == b;
console.log(c);//true
console.log(a === b);//false === hem deÄŸeri hem tipi eÅŸit mi

console.log(a!=b);//false 
console.log(a !== b);//true 

var a = "a";
var b = "b";
console.log(a>b);//false ascii koda gÃ¶re
console.log(a<b);//true
console.log(a.charCodeAt());//97.ascikodu verir
console.log(b.charCodeAt());//98
console.log("2".charCodeAt());//50

//  ğŸ”¥ğŸ”¥ğŸ”¥           Logical Operators 
/*and = %%
  or = ||
  not = !
*/
var  a = (true || false);
console.log(a);true
console.log(2 && 5);// 5 i ddÃ¶ndÃ¼rÃ¼r
console.log(null && NaN);//null

var capitalletter = true;
var symbol = true;
var passlength = false;
var result = capitalletter && symbol && passlength;
console.log(result || "Try again");
//ğŸ”¥        ??
// uzun uzun if statement ile kontrol yapmaktansa bÃ¶yle kÄ±sa bir yÃ¶ntem geliÅŸtirilmiÅŸ
var k;

console.log(k ?? "Null");//Ã§Ä±ktÄ±:null 
var b = null;
console.log(b ?? k);// Ã§Ä±ktÄ±:undefined. null olmayanÄ± Ã§Ä±ktÄ± verir ama yukarÄ±daki string olduÄŸu iÃ§in "null" Ã§Ä±ktÄ±sÄ± verdi
// ilk deÄŸer null sa diÄŸerini Ã§Ä±ktÄ± verir.ilk deÄŸer null deÄŸilse ikinciyi Ã§Ä±ktÄ± verir.

//          ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥            SESSION 4    ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥

//ğŸ”¥ğŸ”¥ğŸ”¥   Conditionals
let score = 51;
if (score >= 50) {
    console.log ("Tebrikler, geÃ§tiniz");
}
if (score >= 50) 
    console.log ("Tebrikler, geÃ§tiniz");
// tek satÄ±rda da yazÄ±labiliyor.ÅŸartÄ± tek bir statement varsa
let grade = score >= 52 
if (grade) console.log("Tebrikler geÃ§tiniz");
/* let scor = prompt("Notunuzu giriniz : ")
let grades = scor >= 52
if (grades) console.log(`Tebrikler, notunuz ${scor} geÃ§tiniz`); */

if (grade){
    console.log(`Tebrikler notunuz ${score} geÃ§tiniz`);
} else {
    console.log(`Ã¼zgÃ¼nÃ¼m kaldÄ±nÄ±z`);
}
if (score>80){
    console.log("Tebrikler Ã§ok baÅŸarÄ±lÄ±sÄ±nÄ±z");
} else if (score >= 50) {
    console.log("Tebrikler geÃ§tiniz");
}else {
    console.log(`Ã¼zgÃ¼nÃ¼m kaldÄ±nÄ±z`);
}
// ğŸ”¥ğŸ”¥ nested if
if (score >= 50) {
    if (score>80){
        console.log("Tebrikler Ã§ok baÅŸarÄ±lÄ±sÄ±nÄ±z");
    } else {
        console.log("Tebrikler geÃ§tiniz");
    }
}else{
    console.log("Ã¼zgÃ¼nÃ¼m kaldÄ±nÄ±z")
}
//ğŸ”¥ğŸ”¥  Ternary if
// syntaxi => condition ? true(ÅŸartÄ± saÄŸlÄ±yorsa burasÄ± Ã§Ä±ktÄ± vercek) : false(ÅŸartÄ± saÄŸlamÄ±yorsa burasÄ± Ã§Ä±ktÄ± vercek yani else kÄ±smÄ±)
// Ã¶nemli bir yapÄ± genel olarak tek satÄ±rlÄ±k if else yapÄ±sÄ± yerine tercih edilir
var scores = 49;
scores>=50 ? console.log("Tebrikler geÃ§tiniz") : console.log("Ã¼zgÃ¼nÃ¼m kaldÄ±nÄ±z(ternary if yapÄ±sÄ±yla yapÄ±ldÄ±)");
// ğŸ”¥ğŸ”¥ switch case yapÄ±sÄ±
// bu da Ã¶nemli bir yapÄ± if-elseif-else yapÄ±sÄ± yerine kullanÄ±labilir 
// syntaxi if-elseif-else e gÃ¶re daha kolaydÄ±r
var text;
var fruits = "Banana";
switch (fruits) {
    case "Banana":
        text = "Banana is good"
        break;
    case "Orange":
        text = "I am not a fan of orange.";
        break;
    case "Apple":
        text = "How you like them aplles?";
        break;
    default:
        text = "I have never heard of that fruit...";
        break;
}
console.log(text);
// her case den sonra break koymak gerekir. yoksa diÄŸer caselere geÃ§meye devam eder default kÄ±smÄ±nÄ± bile Ã§alÄ±ÅŸtÄ±r
// bu durumda da kodumuzdan istediÄŸimiz Ã§Ä±ktÄ±yÄ± alamayabiliriz
var text;
var fruits = "APPLE";
switch (fruits.toLowerCase()) {
    case "banana":
        text = "Banana is good"
        break;
    case "orange":
        text = "I am not a fan of orange.";
        break;
    case "apple":
        text = "How you like them apples?";
        break;
    default:
        text = "I have never heard of that fruit...";
        break;
}
console.log(text);
//.toLowerCase ya da .toUpperCase string deÄŸerimizi kÃ¼Ã§Ã¼k ve bÃ¼yÃ¼k harf yapar.
// js case sensitive olduÄŸu iÃ§in koÅŸul ifadelerimizde yada diÄŸer iÅŸlemlerimizde bu metodlarÄ± kullanabiliriz.
/* var text;
var fruits = prompt("Enter your favorite fruit");
switch (fruits.toLowerCase()) {
    case "banana":
        text = "Banana is good"
        break;
    case "lime":
    case "orange":
        text = `I am not a fan of ${fruits.toLowerCase()}.`;
        break;
    case "apple":
        text = "How you like them aplles?";
        break;
    default:
        text = "I have never heard of that fruit...";
        break;
}
console.log(text);
// bu Ã¶rnekte olduÄŸu gibi case yapÄ±sÄ±nÄ± peÅŸpeÅŸe kullanabiliriz.yani diyoruz ki caselerde belirlediÄŸimiz ÅŸartlarÄ±mÄ±zdan hangisi gelirse gelsin sen aynÄ± ÅŸeyi dÃ¶ndÃ¼r.
// ${fruits.toLowerCase()} bu yapÄ± ile de hangi case gerÃ§ekleÅŸtiyse onun deÄŸerini bu ÅŸekilde Ã§Ä±ktÄ±mÄ±za monte edebiliriz

*/

//ğŸ”¥ gÃ¼ne gÃ¶re o gÃ¼n programda ne olduÄŸunu gÃ¶steren switch case yapÄ±sÄ±:
/* var text;
var days = prompt("Enter day");
switch (days.toLowerCase()) {
    case "monday":
    case "wednesday":
    case "thursday":
    case "saturday":
        text = "In class";
        break;
    case "tuesday":
    case "friday":
        text = "Teamwork";
        break;
    case "sunday":
        text = "Holiday";
        break;
    default:
        text = "enter wrong day"
        break;
}
console.log(text); */

//ğŸ”¥ leap year olup olmadÄ±ÄŸÄ±na gÃ¶re ÅŸubat ayÄ±nÄ±n gÃ¼n sayÄ±sÄ±nÄ± bulma
var year = 2152;
var month = 2;
var dayCount;
switch (month) {
    case 1:
    case 3:
    case 5:
    case 7:
    case 8:
    case 10:
    case 12:
        dayCount = 31;
        break;
    case 4:
    case 6:
    case 9:
    case 11:
        dayCount = 30;
        break;
    case 2:
        if (((year % 4 == 0) && !(year % 100 == 0))
            || (year % 400 == 0))
            dayCount = 29;
        else
            dayCount = 28;
        break;
    default:
        dayCount = -1; // invalid month
}
console.log(dayCount); // 29

//ğŸ”¥ğŸ”¥ğŸ”¥                  Loops

//ğŸ”¥ğŸ”¥ while

let i = 10;
let sum = 0;
while (i<6){
    sum += i;
    i++;
}
console.log(sum); //15
// while da bulunan koÅŸul false olana kadar dÃ¶ngÃ¼ Ã§alÄ±ÅŸmaya devam eder
// do while yapÄ±sÄ±nda do iÃ§inde buluna her tÃ¼rlÃ¼ baÅŸlangÄ±Ã§ta Ã§alÄ±ÅŸÄ±r sonra whiledeki koÅŸul doÄŸruysa Ã§alÄ±ÅŸmaya devam eder false olana kadar
let sums = 0;
do {
    sums +=i ;
    i++;
} while (i<6);
console.log(sums,{i}); // sums 10 olark Ã§Ä±ktÄ± verir. while koÅŸuluna uymadÄ±ÄŸÄ± iÃ§in durur

/* let j = +prompt ("Bir sayÄ± giriniz : ");
console.log(isNaN(j),j)// isNaN sayÄ± olup olmadÄ±ÄŸÄ±na bakar sayÄ±ysa flse verir */
/* while (isNaN(j)) {
    j = +prompt ("Bir sayÄ± giriniz : ");

}
console.log("Bir sayÄ± girdiniz") */

/* let j;
do {
    j = +prompt ("Bir sayÄ± giriniz : ");//+ koayarak kullanÄ±cÄ±n gireceÄŸi deÄŸerin tÃ¼rÃ¼nÃ¼ number yapÄ±yoruz(pythondfaki int( mantÄ±ÄŸÄ±))
} while (isNaN(j));
console.log(`girlen deÄŸer ${j}`) */
// userÄ±n sayÄ± girmesini saÄŸlamÄ±ÅŸ olduk
// user harf girerse dÃ¶ngÃ¼mÃ¼z sormaya devam edecek numara girdiÄŸinde do Ã§alÄ±ÅŸcak ve durcak

//ğŸ”¥ğŸ”¥    For Loop
// farklÄ± kullanÄ±m yollarÄ±;
// i Ã¶rneÄŸinde i yi for yapÄ±sÄ± iÃ§inde de declare edebiliriz.
// i yi for yapÄ±sÄ± dÄ±ÅŸÄ±nda da declare edebiliriz.
let k1 = 0;
for (k1 = 0; k1<10; k1++) {
    console.log(k1);
}
let jk = 0;
for (;jk<4;jk++){
    console.log(jk);
}
//    ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥                     SESSION 5         ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥
let strOne = "clarusway";
console.log(strOne.length);//9 pythondaki len() metodu ile aynÄ±
console.log(strOne[0]);//c indexleme python ile aynÄ± []iÃ§inde belirtiyoruz ve 1 den deÄŸil 0 dan baÅŸlar
// pythondan farklÄ± olarak - indexleme yoktur son elemana length-1 diyererk eriÅŸebiliriz

for(let i=0 ; i<strOne.length; i++){
    console.log(strOne[i]);
}
for (let j = strOne.length-1 ; j >= 0; j--) {
    console.log(strOne[j]);
}// tersten yazdÄ±rma
console.log(strOne.slice(3-7));//aralÄ±klÄ± yazdÄ±rma
//ğŸ”¥  continue
for (let i=0; i<=100;i++){
    if (i % 5 == 0) continue;
    console.log(i);
}

/* while (true) {
    let x = prompt(`bir sayÄ± giriniz \n veya q ile Ã§Ä±kÄ±ÅŸ yapÄ±nÄ±z`);
    if (x.toLowerCase() == `q`){
        console.log("Ã§Ä±kÄ±ÅŸ yapÄ±ldÄ±")
        break
    } else if(isNaN(x)){
        continue;
    } else {
        console.log(`${x}'in karesi = ${x*x}`)
    }
} */
console.log(Math.random()*6+1);//bu sonraki konularda anlaÅŸÄ±lcaktÄ±r.built-in fonksiyondur.0 ve 1 arasÄ±nda rastgele sayÄ± dÃ¶ndÃ¼rÃ¼r. 1 Ã§Ä±kmaz
console.log(Math.trunc(Math.random()*6+1));//trunc da kÃ¼suratÄ± keser.burada +1 dememizin sebebi random gelcek sayÄ± 1 olmayacaÄŸÄ± iÃ§in koyduk yani deÄŸerimiz en fazla 5,9999 kÃ¼suratlÄ± olabilir
// trunc ile bu kÃ¼suratÄ± kesiyoruz ve 1 ekleyerek 6 ya ulaÅŸabiliyoruz
// ğŸ”¥ zar atma
let xx,yy;
let count = 0;
let cift = 0;
while(true){
    xx = Math.trunc(Math.random()*6)+1;
    yy = Math.trunc(Math.random()*6)+1;
    if (xx == 6 && yy ==6) {
        count++;
        console.log("KazandÄ±nÄ±z");
        break;
    } else if (xx == yy && xx != 6){
        cift++;
        console.log(xx,yy,`${cift}. Ã§ift zar`);
        if (cift ==3) {
            console.log("Kaybettiniz");
            break;
        }
    } else {
        console.log(xx,yy);
    }
    count++;
}
console.log(count);

//ğŸ”¥ğŸ”¥ğŸ”¥             Functions
//function keywordÃ¼ ile tanÄ±mlanÄ±r
sayHi(); // birkere  tanÄ±mlayÄ±nca Ã¶Ã¶ncesinde de sonrasÄ±nda da Ã§aÄŸÄ±rÄ±r
// hoisting ten dolayÄ±
function sayHi(){
    console.log("Hi");
}
sayHi();
let userName = "MÃ¼nir";
function sayHi(name){
    console.log(`hello ${name}`);
}
sayHi(userName);
sayHi("Mark");

function sayHi2(name) {
    return ("Hello "+ name)
}
console.log(sayHi2("veli"));
// pythondan farklÄ± olarak fonksiyonu yine return ile tanÄ±mlÄ±yoruz ama Ã§aÄŸÄ±rÄ±rken console.log iÃ§erisinde Ã§aÄŸÄ±rÄ±yoruz
console.log(typeof sayHi2());// string
console.log(typeof sayHi());// function tanÄ±mlarken console.logla tanÄ±mladÄ±ÄŸÄ±mÄ±z iÃ§in undefined veriyor,pythonda da aynÄ±ydÄ±

function add100(num1) {
    return num1+100
}
console.log(add100(23));//123
function add(num1,num2) {
    return num1+ num2
}
console.log(add(23));//NaN verir Ã§Ã¼nkÃ¼ num2 yi gÃ¶ndermedik belirlediÄŸimiz paramtere kadar argÃ¼man gÃ¶ndermemiz gerekir,bunu engellemek iÃ§in parametrelerimze default deÄŸer verebiliriz;
function add1(num1,num2=0) {
    return num1+ num2
}
console.log(add1(23));// num2 ye default olrak 0 verdik Ã§Ä±ktÄ±mÄ±z 23 oldu
console.log(add1(23,25));//48 
//ğŸ”¥ğŸ”¥ function expressions
/* console.log(square(4));// aÅŸaÄŸÄ±daki Ã¶rnekte function expressions ile tanÄ±mladÄ±ÄŸÄ±mÄ±z iÃ§in burada fonksiyonumuz Ã§alÄ±ÅŸmadÄ± bunun amacÄ± houstingdden kurtarmak*/
let square = function(a) {return a*a};// function expressions
console.log(square(3));//9

let adder = new Function ("a","b","return a+b");
console.log(adder(2,6));//8
console.log(typeof adder);//function 

let sumAdd = function (a,b){return a+b;};
let addTwo = function (num1){
    return sumAdd(num1,2);
};// function iÃ§inde diÄŸer bir functionu Ã§aÄŸÄ±rabiliriz
console.log(addTwo(5));// ikinci fonskiyonda sum  fonksiyonumuzu Ã§aÄŸÄ±rÄ±yoruz ve Ã§Ä±ktÄ± 7
console.log(addTwo(7));// 9

// ğŸ”¥faktÃ¶riyel bulma
let faktÃ¶r = function (num2){
    if (num2 == 0) {
        return 1
    } else {
        return num2 * faktÃ¶r(num2-1);
    }
}
console.log(faktÃ¶r(5));

function sayHello(name){
    name && console.log(`Hello ${name}`);
}
sayHello("deli");

//Fonksiyon kendine verilen deÄŸeri deÄŸiÅŸtirmeyecek;
function square2(num3){
    num3 *= num3;
    return num3;

}
let myNum = 4;//myNum global bir deÄŸiÅŸken 
//aÅŸaÄŸÄ±da myNum un deÄŸerini argÃ¼man olarak kullanmÄ±ÅŸ olduk
console.log(square2(myNum));//16
console.log(myNum);//4
// bu ÅŸekilde myNum deÄŸiÅŸmedi
//ama localde oluÅŸturursak
function square3(num4){
    myNum1= num4 * num4;
    return myNum1;

}
let myNum1 = 4;
console.log(square3(myNum1));//16
console.log(myNum1);//16 oldu
//ancak function iÃ§inde yani localde let ile tanÄ±mlarsak globaldeki deÄŸiÅŸmez
function square4(num5){
    let myNum2= num5 * num5;
    return myNum2;

}
let myNum2 = 4;
console.log(square4(myNum2));//16
console.log(myNum2);//4

let student = {};
student.name = 'Mesut';
function sayHi3(student) {
    console.log(`Hello! ${student.name} from entry point`);
    student.name = 'Zeynep';
    console.log(`Hello! ${student.name} inside function`);
    student = {name : "Leon"};
    console.log(`Hello! ${student.name} inside function`);
}
sayHi3(student);
console.log(`Hello! ${student.name} from outside`);
// gloablin deÄŸiÅŸtirilmesi istenmez genel olarak
//o yÃ¼zden fonksiyon iÃ§indeki leonu tanÄ±mladÄ±ÄŸÄ±mÄ±z gibi tanÄ±mlamamÄ±z gerekiyor
// aÅŸaÄŸÄ±daki ÅŸekildeki gibi tanÄ±mlayabiliriz
const student1 = { name: 'Mesut'};
function f1(st) {
   console.log(`this is ${st.name}`);
   st.name = 'Zeynep';
   console.log(`this is ${st.name}, should be zeynep?`);
}

f1(student1);
console.log(student1);

//                         ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥        SESSION 6      ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥
let student5 = "Mustafa";
function sayHi(studentName) {
    console.log(`Welcome ${studentName}`);
}
sayHi(student5);//deÄŸiÅŸken yollayarak aslÄ±nda deÄŸiÅŸkenimizn deÄŸerini yani 'Mustafa' yÄ± argÃ¼man yapmÄ±ÅŸ oluyoruz

let students = ["John","Jane","Joe"];//array yapÄ±sÄ± 
function sayHello(studentName) {
    console.log(`Welcome ${studentName}`);
}
for (let i = 0; i<students.length;i++){
    sayHello(students[i]);
}
function sayHi1(student){
    for(let i = 0;i < student.length;i++){
        console.log(`Welcome ${student[i]}`);
    }
}
sayHi1(students);

function sumNew(){
    let sum = 0;
    for (let i = 0; i< arguments.length; i++){
        sum += arguments[i];
    }
    return sum;
}
//ğŸ”¥ arguments default olarak bulunur fonksiyonun metodu gibi.pythonda *args gibi
// yani function tanÄ±mlarken parametre belirtmezsekfonksiyonu Ã§aÄŸÄ±rÄ±rken gÃ¶nderdiÄŸimiz bÃ¼tÃ¼n argÃ¼manlar arguments iÃ§inde toplanÄ±r, bu bir array yapÄ±sÄ± oluÅŸturur. Ã¶rnekte olduÄŸu gibi elemanlara ulaÅŸmak iÃ§in array metodlarÄ± kullanÄ±lÄ±r
console.log(sumNew(1));//1
console.log(sumNew(1,2,3,4,5));//15

function sum1(a,b,...others){
    console.log(arguments);
    console.log(others);
    let sum = 0;
    for (let i = 0; i< arguments.length; i++){
        sum += arguments[i];
    }
    return sum;
}
//bu yÃ¶ntemde rest operatoru kullanmÄ±ÅŸ oluyoruz yani bu Ã¶rnek Ã¼zerinden sÃ¶yleyecek olursak a, b den sonrasÄ±nÄ± arraye Ã§evirmiÅŸ oluyor
console.log(sum1(1,2,3,4));//Ã§Ä±ktÄ±mÄ±z:
/* {0: 1, 1: 2, 2: 3, 3: 4}
[3, 4]
10 */
function sum2(a,b,...others){
    console.log(arguments);
    console.log(others);
    let sum = 0;
    for (let i = 0; i< others.length; i++){
        sum += others[i];
    }
    return sum;
}
console.log(sum2(1,2,3,4));// a ve b den sonra olanlara iÅŸlem yapÄ±yor sadece Ã§ktÄ± 7
const bill = function(tax,...list){
    let total = 0;
    for(let i =0; i < list.length; i++){
        total += list[i]+list[i]*tax;
    }
    return total;
}
//ğŸ”¥vergi hesaplama 
console.log(bill(0.18,10,15,20));

function bolme(num1,num2){
    if(num2 === 0){
        return "Zero Division Error"
    } else {
        return num1 / num2
    }
}
console.log(bolme(12,2));
console.log(bolme(12,0));
function bolme1(num1,num2){
    if(num2 === 0) return "Zero Division Error"
    return num1 / num2
}
console.log(bolme1(12,3));
console.log(bolme1(12,0));
//ğŸ”¥ğŸ”¥ ternary
function bolme2(num1,num2){
   return num2==0 ? "Zero Division Error" : num1/ num2
}
console.log(bolme2(12,4));
function bolme3(num1,num2){
    return num2 ? num1 / num2 : "Zero Division Error" 
}
console.log(bolme3(24,4));
//ğŸ”¥example
function pascalNumber1(n){
    let sum = 0;
    for(let i = 1; i < n+1; i++){
    sum +=i
    }
    return sum
}
console.log(pascalNumber1(5));//15
function pascalNumber2(n){
    return (n*(n+1)/2)
}
console.log(pascalNumber2(6));//21
function pascalNumber3(n){
    if (n===1) return 1;
    return n + pascalNumber3(n-1);
}
console.log(pascalNumber3(7));//28 recursive iÅŸlem yani fonksiyon iÃ§inde aynÄ± fonksiyonu Ã§alÄ±ÅŸtÄ±rma
// recursive iÅŸlemlerde mutlaka Ã§Ä±kÄ±ÅŸ kapÄ±sÄ± konulmasÄ± gerekir
// faktÃ¶riyel
function faktÃ¶r11(n){
    if (n===1) return 1;// Ã§Ä±kÄ±ÅŸ kapÄ±sÄ±
    return n * faktÃ¶r11(n-1);
}
console.log(faktÃ¶r11(5));//120
function faktÃ¶r1(n){
    return n===1 ? 1 : n * faktÃ¶r1(n-1);
}
console.log(faktÃ¶r1(5));//120

//ğŸ”¥ğŸ”¥  arrow function 

let xz = (a) => a * 5;//tek satÄ±r olduÄŸu iÃ§in paranteeze filan gerek yok
//lambda ile aynÄ±
console.log(xz(5));// 25
let toplam = a => a + 50;
console.log(toplam(17));// 67

let iife = (function trian(num) {
    if (num === 1) return 1;
    return num + trian(num-1);
})(3);
console.log(iife);


//  ğŸ”¥ğŸ”¥ğŸ”¥         String Methods
let str1 = "Hello ";
let str2 = "World";
let str3 = `${str1 + str2}`;
console.log(typeof str1,str2);
console.log(typeof str2,str3);
console.log(typeof str3,str3);
let str4 = new String("A string object");
console.log(str4);
//string immutabledir
//ğŸ”¥ğŸ”¥ concat
let str6 = "Hello ";
let str5 = "World";
let str7 = str6.concat(str5);
console.log(str7);// Hello World

//ğŸ”¥ğŸ”¥ charAt()
// The charAt()Â method returnsÂ the char value at the specified index in a string.
// index of tan farklÄ± olarak tek argÃ¼man alÄ±r iÃ§ine ve index numarasÄ±nÄ± alÄ±r
var a = 'primitive.\nlerin properti veya metodu olmaz.';
console.log(a.charAt());// boÅŸ girilirse ilk indexi getirir
console.log(a.charAt(9));// . noktayÄ± veriyor
console.log(a.charAt(10));// boÅŸ yani \n i burada birÅŸey var ama ne var bilmiyorum diyor ve boÅŸ Ã§Ä±ktÄ± verir
console.log(a.charAt(11));// l
// ğŸ”¥ğŸ”¥  includes
// belirtilen ifadenin variable iÃ§inde olup olmadÄ±ÄŸÄ±nÄ± kontrol eder. varsa true yoksa false
// case sensitivedir
var str = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.";
var n =str.includes("simply");
var n1 =str.includes("Simply");
console.log(n);//true
console.log(n1);//false

// ğŸ”¥ğŸ”¥  indexOf
// belitilen ifadenin indexini dÃ¶ndÃ¼rÃ¼r
var n2 = str.indexOf("simply");//bulduÄŸu ilk yerde bu Ã¶rnek Ã¼zerinden konuÅŸacak olursak s nin indexini verir
console.log(str.indexOf("o", 2));

//           ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥               SESSION 7           ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥

//ğŸ”¥ğŸ”¥ String Replace
var s = "Lorem Ipsum is simply dummy text of the printing and 'printing' typesetting industry.";
console.log(s.replace("dummy", "hello"));
// orjinal variables deÄŸiÅŸmez
//replace metodu case sensitivedir.bunu Ã¶nlemek iÃ§in /i metodu kullanÄ±rÄ±z
console.log(s.replace(/Dummy/i,"oldu"));//regex yÃ¶ntemi
// bÃ¼tÃ¼n harfler iÃ§inse 
console.log(s.replace(/e/g,"a"));//regex yÃ¶ntemi
//ğŸ”¥ğŸ”¥ Search
console.log(s.search("text"));// ilk baÅŸlangÄ±Ã§ indeksini dÃ¶ndÃ¼rÃ¼r.
console.log(s.search("araba"));//olmayan birÅŸey olursa -1 dÃ¶ndÃ¼rÃ¼r
// 2.argÃ¼manÄ± almaz

//ğŸ”¥ğŸ”¥ Slice
console.log(s.slice(0,5));// balÅŸagÄ±Ã§tan bitiÅŸ-1 e kadar kesti
console.log(s.slice(10,-1));// baÅŸlangÄ±Ã§ 10 belirtielene kadar buradaki Ã¶rnekte sondaki karakter Ã§Ä±kmayacak
console.log(s.slice(-31,-10));//printing' typesetting 
console.log(s.slice(-31,76));//printing' typesetting 
console.log(s.slice(54,76));//printing' typesetting 

//ğŸ”¥ğŸ”¥ Split
// iÃ§ine belirtilen argÃ¼mana gÃ¶re metini bÃ¶ler.ve array dÃ¶ndÃ¼rÃ¼r
console.log(s.split(''));//tek tek harflerer gÃ¶re bulur
console.log(s.split(' '));//boÅŸluklara gÃ¶re bÃ¶ler
console.log(s.split());//metini tek eleman yaapar

//ğŸ”¥ğŸ”¥ substr (ÅŸuan artÄ±k kullanÄ±lmÄ±yor)
// baÅŸlangÄ±Ã§tan baÅŸla belirtilen karakter kadar al
console.log(s.substr(26,10));// y text of

//ğŸ”¥ğŸ”¥ substring
// baÅŸlangÄ±Ã§tan baÅŸla sondan -1e kadar al
console.log(s.substring(22,33));//dummy text
console.log(s.substring(33,22));//dummy text
console.log(s.substring(33,-22));//Lorem Ipsum is simply dummy text
// negatif sayÄ±yÄ± 0 olarak kabul ediyor
// yani negatif index almÄ±yor
console.log("     Arrays");

// ğŸ”¥ğŸ”¥ğŸ”¥             Arrays
// [] iÃ§ine alarak veya new Array metodu ile oluÅŸturabiliriz
var cars = ["Opel", "Audi", "BMW"];
console.log(cars);
var cars2 = Array.of("Opel", "Audi", "BMW")
console.log(cars2);
var cars3 = new Array("Opel", "Audi", "BMW")
console.log(cars3);
var num1 = new Array(2,10)
console.log(num1);
var num2 = new Array(10)
console.log(num2);
// const cars =["Opel","Audi",[1,2,true],"BMW"]
cars[4] = 'Porsche'
console.log(cars);
cars = []
console.log(cars);
cars[cars.length] = 'Ferrari'
console.log(cars[8]);
const cars1 = ["Opel", ,"Audi",,,,"BMW"];
console.log(typeof cars1);//object
// variable Ä±n array olup olmadÄ±ÄŸÄ±nÄ± aÅŸaÄŸÄ±daki gibi kontrol edebiliriz:
console.log(cars1 instanceof Array);//true
console.log(Array.isArray(cars1));//true
//length
const fruits1 = ["Banana", "Orange", "Apple"];
// fruits[6] = "Lemon";

console.log(fruits1);
console.log(fruits1.length);

var a = ['dog','lion','hen'];
a[100] = 'horse'; 
// js burada bu atamayÄ± yapmaak iÃ§in 100. indexe kadar undefined olarak eleman atamasÄ± yapar
// 100.indexe gelince de atamayÄ± gerÃ§ekleÅŸtirir
const vegetables = ['Broccoli','Celery','Parsley','Artichoke']

console.log(fruits1.concat(vegetables));

//ğŸ”¥ğŸ”¥ arrayi stringe Ã§evirme yÃ¶ntemleri;
console.log(""+fruits1);
console.log(fruits1.toString());

// ğŸ”¥ğŸ”¥  Sort
const daltones = ['Joe','Jack','William','Avarel'];
console.log(daltones.sort());//Â ['Avarel', 'Jack', 'Joe', 'William']
const num5 = [40,100,1,5,25,10];
console.log(num5.sort());//Â [1, 10, 100, 25, 40, 5] ilk karaktere gÃ¶re sÄ±ralama yapÄ±yor.istenilen bir durum deÄŸil
//bunu engellemek iÃ§in sortun iÃ§ine fonksiyon tanÄ±mlarÄ±z
console.log(num5.sort((a,b)=> a-b));//[1, 5, 10, 25, 40, 100]
// burdaki fonksiyon da sonuÃ§ negatif Ã§Ä±karsa b nin pozisyonunu algÄ±lÄ±yor 
console.log(num5.sort((a,b)=> b-a));// bu da bÃ¼yÃ¼kten kÃ¼Ã§Ã¼ÄŸe
console.log(daltones.reverse());//
console.log(daltones);

//ğŸ”¥ğŸ”¥ push() ve pop()
// push arrayin sonua ekler,pop ta arrayin sonundan siler,iÃ§lerine argÃ¼man almaz
// pop sildiÄŸini dÃ¶ner
// pythondan append ve pop ile aynÄ±
fruits1.push("pear");
console.log(fruits);
fruits1.push("mango","pineapple",2)
console.log(fruits);//['Banana', 'Orange', 'Apple', 'pear', 'mango', 'pineapple', 2]
fruits1.pop();
console.log(fruits1);//['Banana', 'Orange', 'Apple', 'pear', 'mango', 'pineapple']
console.log(fruits1.pop());//pineapple bu ÅŸekilde kullanÄ±rsak sildiÄŸini verir
// yani bu gibi metotlarda bu ÅŸekilde ataamaa yapabiliriz

//ğŸ”¥ğŸ”¥ Shift and unshift 
// shift sildiÄŸini dÃ¶ndÃ¼rÃ¼r.silinen elemanÄ± herhangi bir deÄŸiÅŸkene tanÄ±mlama imkanÄ± verir bize pop gibi
// shift baÅŸtan siler unshift baÅŸa ekler
const deleted = fruits1.shift();
console.log(deleted);//Banana baÅŸtan sildi
console.log(fruits1);
const uns = fruits1.unshift("Chery");// burada Ã¶rnekten yola Ã§Ä±kacak olursak fruits arrayinin eleman sayÄ±sÄ±nÄ± dÃ¶ndÃ¼rmÃ¼ÅŸ oldu
console.log(uns);//5
console.log(fruits1);//['Chery', 'Orange', 'Apple', 'pear', 'mango']

//ğŸ”¥ğŸ”¥ splice
// sildiÄŸini dÃ¶ndÃ¼rÃ¼r
var names = ["John","Edward","Victor"];
var deleted1 = names.splice(2,20,"Mark","James");
// bu Ã¶rnekte 2.indexe git 20tane sil(olup olmamasÄ± etkilemez) ve 2.index ve sonrasÄ±nda ÅŸunlarÄ± ekle
console.log({deleted1});// {} object gÃ¶sterimi iÃ§in kullaÄ±nÄ±lÄ±yor:{deleted1: Array(1)}(1elemanlÄ± array demek)
console.log(deleted1);// ['Victor']
console.log(names);//['John', 'Edward', 'Mark', 'James']
names.splice(1,1,"Mahmut","Jamal");
console.log(names);//['John', 'Mahmut', 'Jamal', 'Mark', 'James']
//splice da araay deÄŸiÅŸir

//ğŸ”¥ğŸ”¥ slice 
// orjinal array deÄŸiÅŸmez
const months = ['Jan', 'March', 'April', 'June',"july"];
const springs1 = months.slice(1,3);
const springs2 = months.slice(-4,-2);
const springs3 = months.slice(1,-2);
console.log(springs1);//(2)Â ['March', 'April']
console.log(springs2);//(2)Â ['March', 'April']
console.log(springs3);//(2)Â ['March', 'April']
const springs4 = months.slice(2,-7);
console.log(springs4);// bulamazsa boÅŸ array dÃ¶ndÃ¼rÃ¼r []

//ğŸ”¥ğŸ”¥ indexOf ve lastIndexOf
//baÅŸlangÄ±Ã§ parametresi alabilir ve dahil eder
const colors2 = ["Red", "Yellow", "Green", "Blue", "Pink", "Green"];
const x5 = colors2.indexOf("Green", 3); // 3ten baÅŸla saÄŸa git indexi ver
console.log(x5);//5

const colors1 = ["Red", "Yellow", "Green", "Blue", "Green","Red","Yellow","Blue"];
const last = colors1.lastIndexOf("Blue")
console.log(last)//7
const last1 = colors1.lastIndexOf("Blue",6)//yani 6dan baÅŸla sola git ve index i ver
console.log(last1)//3 


//ğŸ”¥ğŸ”¥ğŸ”¥ğŸ”¥    coding challengelar

//ğŸ”¥ reverse order words
function myreversed1(text){
    let newText1 = "";
    if (text.includes(" ")){
        let newText = text.split(" ");
        newText = newText.reverse();
        for (let i = 0;i<newText.length;i++){
            newText1 += newText[i] + " "
        }
    }else if (text.includes(",")){
        let newText = text.split(",");
        newText = newText.reverse();
        for (let i = 0;i<newText.length;i++){
            newText1 += newText[i]
            if(newText[i]!=newText[newText.length-1]){
                newText1 += ","
            }
    } 
    }else {
        return text;
    }
    return newText1
}

console.log(myreversed1("merhabalar"));
console.log(myreversed1("merhabalar ben fener"));
console.log(myreversed1("merhabalar,ben,fener"));

//ğŸ”¥ reverse string 
function myreversed(text){
    let newText = ""
    if (text.length == 1){
        return text;
    }else {
       for (let i = text.length-1;i>=0;i--){
        newText += text[i]
    } 
    }
    
    return newText
}

console.log(myreversed("merhabalar"));
console.log(myreversed("fenerbahÃ§e beÅŸiktaÅŸ galatasaray"));

//ğŸ”¥ fibonacci
function fibonacci(val){
    let fiboNum = [1,1];
    if (val > fiboNum.length){
       for(let i = 0;i<val-2;i++){
        fiboNum.push(fiboNum[i]+fiboNum[i+1]);
       }
       return fiboNum;
    } else if (val == fiboNum.length){
        return fiboNum
    } else if (val == 1){
        return [1]
    } else {
        return "wrong value entered"
    }
}

console.log(fibonacci(10));
console.log(fibonacci(0)); 

//ğŸ”¥ switch case ile hesap makinesi
/*let operatÃ¶r = prompt("Enter the operator");
let num1 = +prompt("Number1");
let num2 = +prompt("Number2");
switch (operatÃ¶r) {
    case '+':
        console.log(num1+num2);
        break;
    case '-':
        console.log(num1-num2);
        break;
    case '*':
        console.log(num1*num2);
        break;
    case '/':
        console.log(num1/num2);
        break;
    default:
        console.log("HiÃ§bir iÅŸlem yapmadÄ±nÄ±z.");
        break;
} */